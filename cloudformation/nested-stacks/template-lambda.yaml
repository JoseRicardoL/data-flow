AWSTemplateFormatVersion: "2010-09-09"
Description: "Lambda Functions for GTFS Processing"

Parameters:
  S3Bucket:
    Type: String
    Description: S3 Bucket for scripts and data
  Environment:
    Type: String
    Description: Deployment environment (dev, test, prod)
  LambdaS3KeyPrefix:
    Type: String
    Description: S3 key prefix for Lambda function code packages
  ProcessingStateTableName:
    Type: String
    Description: Name of the DynamoDB table for processing state
  CapacityControlTableName:
    Type: String
    Description: Name of the DynamoDB table for capacity control
  MaxConcurrentStateMachines:
    Type: Number
    Description: Maximum number of concurrent state machine executions

  PreProcessorLayerArn:
    Type: String
    Description: ARN for the pre_processor Lambda function layer
    Default: ""
  PandasLayerArn:
    Type: String
    Description: ARN de la capa de Pandas de AWS
    Default: "arn:aws:lambda:eu-west-1:336392948345:layer:AWSLambda-Python311-SciPy1x:1"
  StateMachineArnParamName:
    Type: String
    Description: SSM Parameter name for state machine ARN

Resources:
  # Función Lambda para preprocesamiento
  GTFSPreprocessorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "GTFSPreprocessor-${Environment}"
      Handler: lambda_function.lambda_handler
      Role: !GetAtt PreprocessorRole.Arn
      Runtime: python3.11
      Timeout: 300
      MemorySize: 1024
      Layers:
        - !Ref PandasLayerArn
        - !Ref PreProcessorLayerArn
      Environment:
        Variables:
          S3_BUCKET: !Ref S3Bucket
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub "${LambdaS3KeyPrefix}/pre_processor.zip"

  # Función Lambda para verificar capacidad
  CheckCapacityFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "GTFSCheckCapacity-${Environment}"
      Handler: lambda_function.handler
      Role: !GetAtt LambdaStateMachineRole.Arn
      Runtime: python3.11
      Timeout: 60
      MemorySize: 256
      Environment:
        Variables:
          CAPACITY_TABLE: !Ref CapacityControlTableName
          MAX_CONCURRENT_EXECUTIONS: !Ref MaxConcurrentStateMachines
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub "${LambdaS3KeyPrefix}/check_capacity.zip"

  # Función Lambda para liberar capacidad
  ReleaseCapacityFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "GTFSReleaseCapacity-${Environment}"
      Handler: lambda_function.handler
      Role: !GetAtt LambdaStateMachineRole.Arn
      Runtime: python3.11
      Timeout: 60
      MemorySize: 256
      Environment:
        Variables:
          CAPACITY_TABLE: !Ref CapacityControlTableName
          STATE_TABLE: !Ref ProcessingStateTableName
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub "${LambdaS3KeyPrefix}/release_capacity.zip"

  # Función Lambda para disparar la siguiente ejecución
  TriggerNextExecutionFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "GTFSTriggerNextExecution-${Environment}"
      Handler: lambda_function.handler
      Role: !GetAtt LambdaStateMachineRole.Arn
      Runtime: python3.11
      Timeout: 60
      MemorySize: 256
      Environment:
        Variables:
          STATE_TABLE: !Ref ProcessingStateTableName
          STATE_MACHINE_PARAM: !Ref StateMachineArnParamName
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub "${LambdaS3KeyPrefix}/trigger_next.zip"

  # Función Lambda para actualizar parámetros SSM (custom resource)
  StateMachineUpdaterFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "GTFSStateMachineArnUpdater-${Environment}"
      Handler: lambda_function.handler
      Role: !GetAtt StateMachineUpdaterRole.Arn
      Runtime: python3.11
      Timeout: 60
      MemorySize: 256
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub "${LambdaS3KeyPrefix}/state_machine_updater.zip"

  # Rol IAM para la función Lambda del preprocesador
  PreprocessorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::${S3Bucket}"
                  - !Sub "arn:aws:s3:::${S3Bucket}/*"

  # Rol IAM para las funciones Lambda de la máquina de estados
  LambdaStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Scan
                  - dynamodb:Query
                Resource:
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ProcessingStateTableName}"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${CapacityControlTableName}"
        - PolicyName: StepFunctionsAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                  - states:DescribeExecution
                  - states:ListStateMachines
                Resource:
                  - !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:GTFSProcessingStateMachine-${Environment}"
                  - !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:execution:GTFSProcessingStateMachine-${Environment}:*"
                  - !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:*"
        - PolicyName: SSMParameterAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource:
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${StateMachineArnParamName}"

  # Rol para el updater de StateMachine ARN
  StateMachineUpdaterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SSMParameterAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ssm:PutParameter
                Resource:
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${StateMachineArnParamName}"

Outputs:
  GTFSPreprocessorFunction:
    Description: Name of the GTFS Preprocessor Lambda function
    Value: !Ref GTFSPreprocessorFunction
    Export:
      Name: !Sub "${AWS::StackName}-GTFSPreprocessorFunction"

  GTFSPreprocessorFunctionArn:
    Description: ARN of the GTFS Preprocessor Lambda function
    Value: !GetAtt GTFSPreprocessorFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-GTFSPreprocessorFunctionArn"

  CheckCapacityFunction:
    Description: Name of the Check Capacity Lambda function
    Value: !Ref CheckCapacityFunction
    Export:
      Name: !Sub "${AWS::StackName}-CheckCapacityFunction"

  CheckCapacityFunctionArn:
    Description: ARN of the Check Capacity Lambda function
    Value: !GetAtt CheckCapacityFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-CheckCapacityFunctionArn"

  ReleaseCapacityFunction:
    Description: Name of the Release Capacity Lambda function
    Value: !Ref ReleaseCapacityFunction
    Export:
      Name: !Sub "${AWS::StackName}-ReleaseCapacityFunction"

  ReleaseCapacityFunctionArn:
    Description: ARN of the Release Capacity Lambda function
    Value: !GetAtt ReleaseCapacityFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-ReleaseCapacityFunctionArn"

  TriggerNextExecutionFunction:
    Description: Name of the Trigger Next Execution Lambda function
    Value: !Ref TriggerNextExecutionFunction
    Export:
      Name: !Sub "${AWS::StackName}-TriggerNextExecutionFunction"

  TriggerNextExecutionFunctionArn:
    Description: ARN of the Trigger Next Execution Lambda function
    Value: !GetAtt TriggerNextExecutionFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-TriggerNextExecutionFunctionArn"

  StateMachineUpdaterFunction:
    Description: Name of the StateMachine ARN Updater Lambda function
    Value: !Ref StateMachineUpdaterFunction
    Export:
      Name: !Sub "${AWS::StackName}-StateMachineUpdaterFunction"
